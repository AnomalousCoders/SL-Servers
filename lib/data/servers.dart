import 'dart:convert';

import 'package:convert/convert.dart';
import 'package:crypto/crypto.dart' as crypto;
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/cupertino.dart';
import 'package:http/http.dart' as http;
import 'package:slservers/data/ipapi.dart';
import 'package:slservers/models/game_instance.dart';
import 'package:slservers/models/ip_api_response.dart';
import 'package:slservers/models/server.dart';
import 'package:slservers/models/server_instance.dart';
import 'package:slservers/models/server_response.dart';

class Servers {

  //"https://virtserver.swaggerhub.com/Helight/SLServers/1.0.0"
  static const String API_LOCATION = "https://api.slservers.eu";

  static Future<PaginatedServerResponse> find({int page = 0, bool localized = true}) async {
    var response;
    if (localized) {
      IpApiResponse ip = await IpApi.get();
      response = await http.get("$API_LOCATION/server?page=$page&limit=10&languages=${ip.countryCode}");
    } else {
      response = await http.get("$API_LOCATION/server?page=$page&limit=10");
    }

    return PaginatedServerResponse.fromJson(jsonDecode(utf8.decode(response.bodyBytes)));
  }


  static Future<bool> create(Server server) async {
    var user = FirebaseAuth.instance.currentUser;
    var token = (await user.getIdToken());
    var response = await http.post("$API_LOCATION/server", headers: {"Authorization": "Bearer $token", "Content-Type": "application/json"}, body: jsonEncode(server.toJson()));
    return true;
  }

  static Future<bool> update(Server server) async {
    var user = FirebaseAuth.instance.currentUser;
    var token = (await user.getIdToken());
    var response = await http.put("$API_LOCATION/server", headers: {"Authorization": "Bearer $token", "Content-Type": "application/json"}, body: jsonEncode(server.toJson()));
    return true;
  }

  static Future<bool> delete(Server server) async {
    var user = FirebaseAuth.instance.currentUser;
    var token = (await user.getIdToken());
    var response = await http.delete("$API_LOCATION/server?server=${server.id}", headers: {"Authorization": "Bearer $token", "Content-Type": "application/json"});
    return true;
  }

  static Future<String> registerServer(Server server, String address) async {
    var user = FirebaseAuth.instance.currentUser;
    var token = (await user.getIdToken());
    var response = await http.post("$API_LOCATION/server/${server.id}/registerInstance", headers: {"Authorization": "Bearer $token", "Content-Type": "application/json"}, body: address);
    Map<String,dynamic> json = jsonDecode(response.body);
    return json["verToken"];
  }

  static Future<Server> _get(String id) async {
    String url = "$API_LOCATION/server/$id";
    print(url);
    var response = await http.get(url);
    print(response.toString());
    return Server.fromJson(jsonDecode(utf8.decode(response.bodyBytes)));
  }

  static Future<List<ServerInstance>> _instances(String id) async {
    var response = await http.get("$API_LOCATION/server/$id/instance");
    print("Instances: ${response.body}");
    List<dynamic> list = jsonDecode(utf8.decode(response.bodyBytes));
    return list.map((e) => ServerInstance.fromJson(e)).toList();
  }

  static Future<Server> preloadId(String id, BuildContext context) async {
    print("Getting server");
    Server server = await _get(id);
    print("Response: ${server.toJson()}");
    if (server.autogenerated) {
      ServerInstance instance = new ServerInstance(id: server.id, address: "${server.vaddress}:${server.vport}", verified: true, name: server.name, description: "");
      server.instanceRefs = [instance];
      if (server.description != null && server.description != "") {
        try {
          /*
          var body = (await http.get("http://www.whateverorigin.org/get?url=" + Uri.encodeComponent(server.description), headers: {"Sec-Fetch-Mode": "cors"})).body;
          var pastebinResponse = jsonDecode(body)["content"];
          print(pastebinResponse.body);
          server.description = (pastebinResponse.body as String).replaceAll(RegExp("(<.*?>)"), "");

           */
          server.description = "";
        } catch (e) {
          throw e;
        }
      }
    } else {
      server.instanceRefs = await _instances(id);
    }

    for (ServerInstance element in server.instanceRefs) {
      String hashedAddress = _digestMD5(element.address);
      GameInstance i = await gameInstance(hashedAddress);
      if (i != null) {
        element.players = i.players;
        element.maxplayers = i.maxPlayers;
        element.version = i.version;
        element.ff = i.friendlyFire;
      } else {
        element.players = 0;
        element.maxplayers = 0;
        element.version = "none";
        element.ff = false;
      }
    }

    if (server.banner != null && server.banner != "") await precacheImage(NetworkImage(server.banner), context);
    if (server.icon != null && server.icon != "") await precacheImage(NetworkImage(server.icon), context);
    return server;
  }

  static Future<List<Server>> myServers() async {
    String token = (await (FirebaseAuth.instance.currentUser).getIdToken());
    var response = await http.get("$API_LOCATION/myServers",  headers: {"Authorization": "Bearer $token"});
    print(response.body);
    List<dynamic> servers = jsonDecode(response.body);
    List<Server> list = servers.map((e) => Server.fromJson(e)).toList();
    print(list.toList());
    return list;
  }
  
  static Future<GameInstance> gameInstance(String hashedAddress) async {
    var response = await http.get("$API_LOCATION/game/$hashedAddress");
    Map<String,dynamic> decoded = jsonDecode(response.body);
    GameInstance instance = GameInstance.fromJson(decoded);
    return instance;
  } 

  static Future<bool> vote(String id) async {
    var response = await http.post("$API_LOCATION/server/$id/vote");
    return response.statusCode == 204;
  }

  static String _digestMD5(String address) {
    var content = new Utf8Encoder().convert(address);
    var md5 = crypto.md5;
    var digest = md5.convert(content);
    return hex.encode(digest.bytes);
  }

}