import 'dart:convert';
import 'dart:html';

import 'package:flutter/cupertino.dart';
import 'package:flutter/material.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:slservers/data/servers.dart';
import 'package:slservers/models/server.dart';
import 'package:slservers/security/auth_manager.dart';
import 'package:slservers/widgets/better_checkbox.dart';
import 'package:slservers/widgets/markdown_editor.dart';
import 'package:slservers/widgets/scroll_wrapper.dart';
import 'package:slservers/widgets/validating_textfield.dart';
import 'package:validators/validators.dart';

class CreateRoute extends StatefulWidget {
  CreateRoute({Key key, this.initial}) : super(key: key);

  Server initial;


  @override
  _CreateRouteState createState() => _CreateRouteState(server: initial);
}

class _CreateRouteState extends State<CreateRoute> {

  Server server;

  _CreateRouteState({this.server});

  @override
  void initState() {
    if (server==null) server = new Server(languages: [], comments: [], instances: [], tags: [], rules: [], autogenerated: false, visible: false, description: "");
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    Size size = MediaQuery.of(context).size;
    return Scaffold(
      body: AuthManager(
        ignoreLogin: false,
        al: "/create",
        child: (_) => ScrollWrapper(
          wrapScreenSize: false,
          child: ConstrainedBox(
            constraints: BoxConstraints(minHeight: size.height, maxWidth: size.width * 0.75),
            child: Column(
              children: <Widget>[
                Container(height: 64,),
                Text("Information", style: GoogleFonts.raleway(color: Colors.lightBlueAccent, fontSize: 24, fontWeight: FontWeight.bold),),
                Text("General settings for the\nserverlist entry", style: GoogleFonts.raleway(color: Colors.white70, fontSize: 18), textAlign: TextAlign.center,),
                Container(height: 8,),
                Container(
                  width: size.width * 0.75 / 2 + 8,
                  child: Column(
                    children: <Widget>[
                      Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: TextField(controller: TextEditingController(text: server.name), onChanged: (s) => server.name = s, decoration: InputDecoration(labelText: "Name", border: OutlineInputBorder(), filled: true, fillColor: Colors.black12),),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: TextField(controller: TextEditingController(text: server.preview), onChanged: (s) => server.preview = s, decoration: InputDecoration(labelText: "Preview", border: OutlineInputBorder(), filled: true, fillColor: Colors.black12),),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: TextField(controller: TextEditingController(text: server.rules.join(",")), onChanged: (s) => server.rules = s.split(",").map((e) => e.trim()).toList(), decoration: InputDecoration(labelText: "Rules", border: OutlineInputBorder(), filled: true, fillColor: Colors.black12, helperText: "Entries are comma separated"),),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: TextField(controller: TextEditingController(text: server.tags.join(",")), onChanged: (s) => server.tags = s.split(",").map((e) => e.trim()).toList(), decoration: InputDecoration(labelText: "Tags", border: OutlineInputBorder(), filled: true, fillColor: Colors.black12, helperText: "Entries are comma separated")),
                      ),
                      Padding(
                        padding: const EdgeInsets.all(8.0),
                        child: TextField(controller: TextEditingController(text: server.languages.join(",")), onChanged: (s) => server.languages = s.split(",").map((e) => e.trim()).toList(), decoration: InputDecoration(labelText: "Languages", border: OutlineInputBorder(), filled: true, fillColor: Colors.black12, helperText: "Entries are comma separated")),
                      )
                    ],
                  ),
                ),
                Padding(
                  padding: const EdgeInsets.all(8.0),
                  child: MarkdownEditor(width: (size.width * 0.75) - 16, callback: (s) => server.description = s, initial: server.description,),
                ),
                Row(
                  mainAxisAlignment: MainAxisAlignment.start,
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Column(
                      children: [
                        Container(height: 64,),
                        Text("Design", style: GoogleFonts.raleway(color: Colors.yellowAccent, fontSize: 24, fontWeight: FontWeight.bold),),
                        Text("Settings for the visual representation\nof your server page", style: GoogleFonts.raleway(color: Colors.white70, fontSize: 18), textAlign: TextAlign.center,),
                        Container(height: 8,),

                        Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Container(
                              child: ValidatingTextfield(width: (size.width * 0.75 / 2 - 16) ,initial: server.icon, onSuccessful: (s) => server.icon = s, label: "Icon", helper: "Imgur url of your server icon. Upload your icon to imgur, click on the copy button\nand paste the url here", validator: (s) {
                                return isAlphanumeric(s) && s.length == 7;
                              }, refactor: (s) {
                                if (isURL(s, hostWhitelist: ["imgur.com"])) {
                                  String extracted = s.split("imgur.com/")[1];
                                  return extracted;
                                } else {
                                  return s;
                                }
                              }),
                            )
                        ),
                      ],
                    ),
                    Column(
                      children: [
                        Container(height: 64,),
                        Text("Social", style: GoogleFonts.raleway(color: Colors.redAccent, fontSize: 24, fontWeight: FontWeight.bold),),
                        Text("Links to your social media accounts\nyour discord server etc.", style: GoogleFonts.raleway(color: Colors.white70, fontSize: 18), textAlign: TextAlign.center,),
                        Container(height: 8,),

                        Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Container(
                              child: ValidatingTextfield(width: (size.width * 0.75 / 2 - 16) ,initial: server.website, onSuccessful: (s) => server.website = s, label: "Website", helper: "(optional) The Link to your website", validator: (s) {
                                try {
                                  return isURL(s, requireProtocol: true, requireTld: true, protocols: ["http", "https"]);
                                } catch (ignored) {
                                  return false;
                                }
                              }),
                            )
                        ),

                        Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Container(
                              child: ValidatingTextfield(width: (size.width * 0.75 / 2 - 16),initial: server.discord, onSuccessful: (s) => server.discord = s, label: "Discord", helper: "(optional) The link to your discord server",validator: (s) {
                                try {
                                  return isURL(s, requireProtocol: true, requireTld: true, protocols: ["http", "https"], hostWhitelist: ["discord.gg", "discord.com", "discordapp.com"]);
                                } catch (ignored) {
                                  return false;
                                }
                              }),
                            )
                        ),

                        Padding(
                            padding: const EdgeInsets.all(8.0),
                            child: Container(
                              child: ValidatingTextfield(width: (size.width * 0.75 / 2 - 16),initial: server.mail, onSuccessful: (s) => server.mail = s, label: "E-Mail", helper: "(optional) An email for your server", validator: (s) {
                                try {
                                  return isEmail(s);
                                } catch (ignored) {
                                  return false;
                                }
                              }),
                            )
                        ),
                      ],
                    )
                  ],
                ),

                Container(height: 16,),
                Row(
                  children: <Widget>[
                    Text("Visibility:", style: GoogleFonts.raleway(color: Colors.white70),),
                    Container(width: 16,),
                    BetterCheckbox(value: server.visible, onChange: (b) {
                      server.visible = b;
                      setState(() {});
                    }, label: "Public",),
                  ],
                ),
                Container(height: 16,),
                RaisedButton(child: Text("Save"), onPressed: () async {
                  print(jsonEncode(server.toJson()));

                  if (server.id != null) {
                    await Servers.update(server);
                  } else {
                    await Servers.create(server);
                  }

                  Navigator.pushReplacementNamed(context, "/");
                }),
                Container(height: 64,)
              ],
            ),
          ),
        ),
      ),
    );
  }
}