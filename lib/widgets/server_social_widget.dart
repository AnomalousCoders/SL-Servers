import 'dart:convert';

import 'package:flutter/material.dart';
import 'package:slservers/data/servers.dart';
import 'package:slservers/models/server.dart';
import 'package:slservers/widgets/validating_textfield.dart';
import 'package:stylight/stylight.dart';
import 'package:validators/validators.dart';

class ServerSocialWidget extends StatefulWidget {
  ServerSocialWidget({Key key, this.server}) : super(key: key);

  Server server;

  @override
  _ServerSocialWidgetState createState() => _ServerSocialWidgetState(server);
}

class _ServerSocialWidgetState extends State<ServerSocialWidget> {

  Server server;


  _ServerSocialWidgetState(this.server);

  @override
  void initState() {
    if (server==null) server = new Server(languages: [], comments: [], instances: [], tags: [], rules: [], autogenerated: false, visible: false, description: "");
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    Size size = MediaQuery.of(context).size;
    size = new Size((size.width / 5 ) * 4, size.height);
    print("Rendering?");

    return ListView(
      children: [
        Container(height: 64,),
        Padding(
          padding: const EdgeInsets.all(16.0),
          child: TextStyles.Title1.text("Social"),
        ),

        Padding(
            padding: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 16),
            child: Container(
              child: ValidatingTextfield(width: (size.width * 0.75 / 2 - 16) ,initial: server.website, onSuccessful: (s) => server.website = s, label: "Website", helper: "(optional) The Link to your website", validator: (s) {
                try {
                  return isURL(s, requireProtocol: true, requireTld: true, protocols: ["http", "https"]);
                } catch (ignored) {
                  return false;
                }
              }),
            )
        ),

        Padding(
            padding: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 16),
            child: Container(
              child: ValidatingTextfield(width: (size.width * 0.75 / 2 - 16),initial: server.discord, onSuccessful: (s) => server.discord = s, label: "Discord", helper: "(optional) The link to your discord server",validator: (s) {
                try {
                  return isURL(s, requireProtocol: true, requireTld: true, protocols: ["http", "https"], hostWhitelist: ["discord.gg", "discord.com", "discordapp.com"]);
                } catch (ignored) {
                  return false;
                }
              }),
            )
        ),

        Padding(
            padding: const EdgeInsets.symmetric(vertical: 8.0, horizontal: 16),
            child: Container(
              child: ValidatingTextfield(width: (size.width * 0.75 / 2 - 16),initial: server.mail, onSuccessful: (s) => server.mail = s, label: "E-Mail", helper: "(optional) An email for your server", validator: (s) {
                try {
                  return isEmail(s);
                } catch (ignored) {
                  return false;
                }
              }),
            )
        ),

        Center(
          child: RaisedButton(child: Text("Save"), onPressed: () async {
            print(jsonEncode(server.toJson()));
            await Servers.update(server);
            success(context, "Social settings updated");
          }),
        ),
      ],
    );
  }
}