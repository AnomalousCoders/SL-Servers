import 'package:slservers/models/server_instance.dart';

/// id : "3fa85f64-5717-4562-b3fc-2c963f66afa6"
/// owner : "3fa85f64-5717-4562-b3fc-2c963f66afa6"
/// name : "My Awesome Server"
/// description : "<p style='color:#FF0000';>*Red paragraph text*</p> *Test*<center><strong>*This is a regular paragraph*</strong></center><table> <tr>  <td>Foo</td><td>Foo</td><td>Foo</td>  </tr><tr>  <td>Foo</td><td>Foo</td><td>Foo</td>  </tr><tr>  <td>Foo</td><td>Foo</td><td>Foo</td>  </tr></table>This is another regular paragraph.<br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>BRACKETS"
/// preview : "The biggest US gaming community out there! We provide you with over 4 unique servers, an active staff team and regular content updates. Feel free to follow us on social media. Btw this is not really a a server, i just like the logo of the esports team"
/// created : "2020-08-08T02:36:34.645Z"
/// autogenerated : true
/// icon : "https://imgur.com/L2jMvgb.png"
/// banner : "https://imgur.com/g2pPznP.jpg"
/// tags : ["events","moderated","035","PINKY#FFFF32CE","PINKY#FFFF32CE","PINKY#FFFF32CE","035","035","035","035","035","035","035"]
/// rules : ["No Teamkilling","No Spawnkilling"]
/// website : "https://example.com/"
/// discord : "https://discord.gg/Ze2APv"
/// mail : "contact@example.com"
/// languages : ["DE","EN"]
/// instances : ["3fa85f64-5717-4562-b3fc-2c963f66afa6"]
/// visible : true
/// network : true
/// promoted : true
/// votecount : 1337
/// players : 43
/// maxplayers : 50
/// comments : [{"owner":"3fa85f64-5717-4562-b3fc-2c963f66afa6","content":"I really like this server!","timestamp":"2020-08-08"}]
/// vaddress : "127.0.0.1"
/// vport : 7777

class Server {
  String _id;
  String _owner;
  String _name;
  String _description;
  String _preview;
  String _created;
  bool _autogenerated;
  String _icon;
  String _banner;
  List<String> _tags;
  List<String> _rules;
  String _website;
  String _discord;
  String _mail;
  List<String> _languages;
  List<String> _instances;
  bool _visible;
  bool _network;
  bool _promoted;
  int _votecount;
  int _players;
  int _maxplayers;
  List<Comment> _comments;
  String _vaddress;
  int _vport;

  String get id => _id;
  String get owner => _owner;
  String get name => _name;
  String get description => _description;
  String get preview => _preview;
  String get created => _created;
  bool get autogenerated => _autogenerated;
  String get icon => _icon;
  String get banner => _banner;
  List<String> get tags => _tags;
  List<String> get rules => _rules;
  String get website => _website;
  String get discord => _discord;
  String get mail => _mail;
  List<String> get languages => _languages;
  List<String> get instances => _instances;
  bool get visible => _visible;
  bool get network => _network;
  bool get promoted => _promoted;
  int get votecount => _votecount;
  int get players => _players;
  int get maxplayers => _maxplayers;
  List<Comment> get comments => _comments;
  String get vaddress => _vaddress;
  int get vport => _vport;


  set id(String value) {
    _id = value;
  }

  List<ServerInstance> instanceRefs = [];

  Server({
      String id, 
      String owner, 
      String name, 
      String description, 
      String preview, 
      String created, 
      bool autogenerated, 
      String icon, 
      String banner, 
      List<String> tags, 
      List<String> rules, 
      String website, 
      String discord, 
      String mail, 
      List<String> languages, 
      List<String> instances, 
      bool visible, 
      bool network, 
      bool promoted, 
      int votecount, 
      int players, 
      int maxplayers, 
      List<Comment> comments,
      String vaddress, 
      int vport}){
    _id = id;
    _owner = owner;
    _name = name;
    _description = description;
    _preview = preview;
    _created = created;
    _autogenerated = autogenerated;
    _icon = icon;
    _banner = banner;
    _tags = tags;
    _rules = rules;
    _website = website;
    _discord = discord;
    _mail = mail;
    _languages = languages;
    _instances = instances;
    _visible = visible;
    _network = network;
    _promoted = promoted;
    _votecount = votecount;
    _players = players;
    _maxplayers = maxplayers;
    _comments = comments;
    _vaddress = vaddress;
    _vport = vport;
}

  Server.fromJson(dynamic json) {
    _id = json["id"];
    _owner = json["owner"];
    _name = json["name"];
    _description = json["description"];
    _preview = json["preview"];
    _created = json["created"];
    _autogenerated = json["autogenerated"];
    _icon = json["icon"];
    _banner = json["banner"];
    _tags = json["tags"] != null ? json["tags"].cast<String>() : [];
    _rules = json["rules"] != null ? json["rules"].cast<String>() : [];
    _website = json["website"];
    _discord = json["discord"];
    _mail = json["mail"];
    _languages = json["languages"] != null ? json["languages"].cast<String>() : [];
    _instances = json["instances"] != null ? json["instances"].cast<String>() : [];
    _visible = json["visible"];
    _network = json["network"];
    _promoted = json["promoted"];
    _votecount = json["votecount"];
    _players = json["players"];
    _maxplayers = json["maxplayers"];
    if (json["comments"] != null) {
      _comments = [];
      json["comments"].forEach((v) {
        _comments.add(Comment.fromJson(v));
      });
    }
    _vaddress = json["vaddress"];
    _vport = json["vport"];
  }

  Map<String, dynamic> toJson() {
    var map = <String, dynamic>{};
    map["id"] = _id;
    map["owner"] = _owner;
    map["name"] = _name;
    map["description"] = _description;
    map["preview"] = _preview;
    map["created"] = _created;
    map["autogenerated"] = _autogenerated;
    map["icon"] = _icon;
    map["banner"] = _banner;
    map["tags"] = _tags;
    map["rules"] = _rules;
    map["website"] = _website;
    map["discord"] = _discord;
    map["mail"] = _mail;
    map["languages"] = _languages??[];
    map["instances"] = _instances??[];
    map["visible"] = _visible;
    map["network"] = _network;
    map["promoted"] = _promoted;
    map["votecount"] = _votecount;
    map["players"] = _players;
    map["maxplayers"] = _maxplayers;
    if (_comments != null) {
      map["comments"] = _comments.map((v) => v.toJson()).toList();
    }
    map["vaddress"] = _vaddress;
    map["vport"] = _vport;
    return map;
  }

  set owner(String value) {_owner = value;}

  set name(String value) {_name = value;}

  set description(String value) {_description = value;}

  set preview(String value) {_preview = value;}

  set created(String value) {_created = value;}

  set autogenerated(bool value) {_autogenerated = value;}

  set icon(String value) {_icon = value;}

  set banner(String value) {_banner = value;}

  set tags(List<String> value) {_tags = value;}

  set rules(List<String> value) {_rules = value;}

  set website(String value) {_website = value;}

  set discord(String value) {_discord = value;}

  set mail(String value) {_mail = value;}

  set languages(List<String> value) {_languages = value;}

  set instances(List<String> value) {_instances = value;}

  set visible(bool value) {_visible = value;}

  set network(bool value) {_network = value;}

  set promoted(bool value) {_promoted = value;}

  set votecount(int value) {_votecount = value;}

  set players(int value) {_players = value;}

  set maxplayers(int value) {_maxplayers = value;}

  set comments(List<Comment> value) {_comments = value;}

  set vaddress(String value) {_vaddress = value;}

  set vport(int value) {_vport = value;}
}

/// owner : "3fa85f64-5717-4562-b3fc-2c963f66afa6"
/// content : "I really like this server!"
/// timestamp : "2020-08-08"

class Comment {
  String _owner;
  String _content;
  String _timestamp;

  String get owner => _owner;
  String get content => _content;
  String get timestamp => _timestamp;

  Comment({
      String owner, 
      String content, 
      String timestamp}){
    _owner = owner;
    _content = content;
    _timestamp = timestamp;
}

  Comment.fromJson(dynamic json) {
    _owner = json["owner"];
    _content = json["content"];
    _timestamp = json["timestamp"];
  }

  Map<String, dynamic> toJson() {
    var map = <String, dynamic>{};
    map["owner"] = _owner;
    map["content"] = _content;
    map["timestamp"] = _timestamp;
    return map;
  }

}